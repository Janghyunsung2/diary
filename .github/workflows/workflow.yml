name: CI/CD with Docker (Java 21)
on:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
      CRYPTO_AES_KEY: ${{ secrets.CRYPTO_AES_KEY }}
      CRYPTO_AES_IV: ${{ secrets.CRYPTO_AES_IV }}
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      DATABASE_USERNAME: ${{ secrets.DATABASE_USERNAME }}
      DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Build Jar
        run: ./gradlew clean bootJar -x test

      - name: Log in to DockerHub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Build Docker image
        run: docker build --no-cache -t ${{ secrets.DOCKERHUB_USERNAME }}/myapp:latest .

      - name: Push Docker image
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/myapp:latest

      - name: Save private key
        run: |
          echo "${{ secrets.EC2_KEY }}" > private_key.pem
          chmod 600 private_key.pem

      - name: Deploy on EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i private_key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << EOF
            docker system prune -af
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/myapp:latest
            docker stop myapp || true && docker rm myapp || true
            docker run -d --name myapp -p 8080:8080 \
              -e AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID} \
              -e AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY} \
              -e CRYPTO_AES_KEY=${CRYPTO_AES_KEY} \
              -e CRYPTO_AES_IV=${CRYPTO_AES_IV} \
              -e DATABASE_URL=${DATABASE_URL} \
              -e DATABASE_USERNAME=${DATABASE_USERNAME} \
              -e DATABASE_PASSWORD=${DATABASE_PASSWORD} \
              -e JWT_SECRET=${JWT_SECRET} \
              -e OPENAI_API_KEY=${OPENAI_API_KEY} \
              ${{ secrets.DOCKERHUB_USERNAME }}/myapp:latest --spring.profiles.active=blue          
          EOF